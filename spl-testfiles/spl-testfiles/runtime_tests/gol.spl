// Game of Life in SPL
// Verwendet VT102 Escape-Codes, um den Bildschirm zu steuern.
// Autor: Uwe Meyer
// Datum: 10.7.2020
// Eingabe: Anzahl der zu durchlaufenden Generationen

// Deklaration des Spielfeldtypen
// Codierung: 0 = frei, 1 = besetzt.
type feld = array [22] of array [22] of int;

// Erzeugen einer neuen Generation aus der vorigen.
// Durchläuft alle Felder (ohne den Rand),
// Zählt die Nachbarn und bestimmt den nächsten Wert.
// Am Ende wird das Feld umkopiert.
proc naechsteGeneration(ref f : feld) {
  var neu        : feld;
  var i          : int;
  var j          : int;
  var nachbarn : int;

  // Durchlaufe jedes Feld des Spielfeldes (ohne den Rand)
  i:=1;
  while (i<20) {
    j:=1;
    while (j<20) {
      neu[i][j]:=0;
      zaehleNachbarn(f, i,j, nachbarn);
      if (f[i][j]=1) {
        if (nachbarn = 2) neu[i][j]:=1;
        if (nachbarn = 3) neu[i][j]:=1;
        }
        else {
            if (nachbarn=3) neu[i][j]:=1;
        }
        j:=j+1;
      }
      i:=i+1;
  }
  // Umkopieren von neu in f
  i:=1;
  while (i<20) {
    j:=1;
    while (j<20) {
      f[i][j]:=neu[i][j];
      j:=j+1;
    }
    i:=i+1;
  }
}

// Berechne die Anzahl der Nachbarn einer Zelle
proc zaehleNachbarn(ref f : feld
                    , i : int
                    , j : int
                    , ref n : int){
    n := f[i-1][j]+f[i+1][j]      // links und rechts
       + f[i][j-1]+f[i][j+1]      // oben und unten
       + f[i-1][j-1]+f[i-1][j+1]  // oben links und oben rechts
       + f[i+1][j-1]+f[i+1][j+1]; // unten links und unten rechts
}

// Initialisierung des Feldes
// Setze alle Felder auf 0
// Setze eine Startpopulation
proc init(ref f : feld) {
  var i : int;
  var j : int;

  i:=0;
  while (i<22) {
    j:=0;
    while (j<22) {
       f[i][j]:=0;
       j:=j+1;
     }
    i:=i+1;
  }

  // Setzen eines Gleiters
  f[1][2]:=1;
  f[2][3]:=1;
  f[3][1]:=1; f[3][2]:=1; f[3][3]:=1;
}

// Hilfsfunktion zur Ausgabe einer waagerechten Linie zur Begrenzung
proc druckeLinie() {
var j : int;
  j:=0;
  while (j<22) {
    printc('-');
    j:=j+1;
  }
  printc('\n');
}

// Ausgabe eines Feldes als ASCII-Zeichen
// "x" = lebendig, " " = tot
proc ausgabe(ref f : feld){
  var i : int;
  var j : int;
  // Cursor Position 23 Zeilen nach oben
  printc(27); printc('['); printi(23); printc('A');
  i:=0;
  while (i<22) {
    if (i=0) druckeLinie();
    else if (i=21) druckeLinie();
    else {
      j:=0;
      while (j<22) {
        if (j=0)  printc('|');
        if (j=21) printc('|');
        if (f[i][j]=1) printc('x'); else printc(' ');
        j:=j+1;
      }
      printc('\n');
    }
    i:=i+1;
  }
  printc('\n');
}

// Hauptprogramm
// Eingabe: Anzahl der Generationen
proc main() {
  var f : feld;
  var i : int;
  var gen : int;

  init(f);
  i:=1;
  printc('A'); printc('n'); printc('z'); printc('a'); printc('h'); printc('l');
  printc(' '); printc('G'); printc('e'); printc('n'); printc('e'); printc('r');
  printc('a'); printc('t'); printc('i'); printc('o'); printc('n'); printc('e');
  printc('n'); printc(':'); printc(' ');
  readi(gen);

  // Bildschirm löschen und erste Ausgabe
  printc(27); printc('['); printi(2); printc('J');
  ausgabe(f);

  while (i<gen) {
    naechsteGeneration(f);
    ausgabe(f);
    i:=i+1;
  }
}
