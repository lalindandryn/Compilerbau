package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    // Apparently there is a cup bug that causes expected_token_ids() to return incorrect results on first call
    // This is why this call is inserted.
    this.expected_token_ids();
    
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right),
            this.symbl_name_from_id(currentToken.sym),
            this.expected_token_ids().stream().map(this::symbl_name_from_id).toList());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

/* Non-terminals */
non terminal Program program;
non terminal GlobalDefinition GlobalDeclaration;
non terminal TypeDefinition TypeDeclaration;
non terminal TypeExpression TypeExpression;
non terminal ProcedureDefinition ProcedureDeclaration;
non terminal ParameterDefinition ParameterDeclaration;
non terminal VariableDefinition VariableDeclaration;
non terminal AssignStatement AssignStmt;
non terminal CallStatement CallStmt;
non terminal CompoundStatement CompoundStmt;
non terminal EmptyStatement EmptyStmt;
non terminal IfStatement IfStmt;
non terminal WhileStatement WhileStmt;
non terminal Statement Statement;
non terminal Expression Expr;
non terminal Expression Expr1;
non terminal Expression Expr2;
non terminal Expression Expr3;
non terminal Variable VarName;

non terminal List<GlobalDefinition> GlobalDecList;
non terminal List<ParameterDefinition> ParameterList;
non terminal List<ParameterDefinition> NEParameterList;
non terminal List<VariableDefinition> VariableList;
non terminal List<Statement> StatementList;
non terminal List<Expression> ArgumentExprList;
non terminal List<Expression> NEArgument;


start with program;

//TODO (assignment 2 and 3): Just a dummy, needs to be replaced by the actual spl grammar.

//SPL Program contains of many global declarations
program ::= GlobalDecList:list {:
                RESULT = new Program(new Position(listleft, listright), list);
            :}
;

//GL : G  GL | empty;
GlobalDecList ::= GlobalDeclaration:head GlobalDecList:tail {:
                    RESULT = cons(head, tail);
                :}
                | /*empty*/ {:
                    RESULT = nil();
                :}
                ;

//A Global declaration has 2 type of declaration 1.) Type Declaration 2.) Procedure Declaration
GlobalDeclaration ::= TypeDeclaration:name {:
                        RESULT = name;
                    :}
                    | ProcedureDeclaration:name {:
                        RESULT = name;
                    :}
                    ;

TypeDeclaration ::= TYPE:pos IDENT:name EQ TypeExpression:typeExpression SEMIC {:
                        RESULT = new TypeDefinition(new Position(posleft, posright), name, typeExpression);
                    :}
                    ;

TypeExpression ::= IDENT: ident {: //Named Typed Expression
                        RESULT = new NamedTypeExpression(new Position(identleft, identright), ident);
                    :}
                 | ARRAY:pos LBRACK INTLIT:number RBRACK OF TypeExpression:typeExpression {: //Array type Expression
                        RESULT = new ArrayTypeExpression(new Position(posleft, posright), number, typeExpression);
                    :}
                 ;

//proc proc_name(parameters){ variables_and_statements }
ProcedureDeclaration ::= PROC:proc IDENT:ident LPAREN ParameterList:paramlist RPAREN LCURL VariableList:varlist StatementList:statementlist RCURL {:
                            RESULT = new ProcedureDefinition(new Position(procleft, procright), ident, paramlist, varlist, statementlist);
                        :}
                        ;

ParameterList ::= NEParameterList:name {:
                        RESULT = name;
                    :}
                | /*EmptyDeclaration*/ {:
                        RESULT = nil();
                    :}
                ;

//NotEmptyParameterList is called if the parameter is not empty
NEParameterList ::= ParameterDeclaration:head {:
                        RESULT = cons(head, nil());
                    :}
                  | ParameterDeclaration:head COMMA NEParameterList:tail {:
                        RESULT = cons(head, tail);
                    :}
                  ;

ParameterDeclaration ::= IDENT:name COLON:pos IDENT:ident {:
                                RESULT = new ParameterDefinition(new Position(posleft, posright), name, new NamedTypeExpression(new Position(posleft, posright),ident), false);
                            :}
                       | REF IDENT:name COLON:pos IDENT:ident {:
                                RESULT = new ParameterDefinition(new Position(posleft, posright), name, new NamedTypeExpression(new Position(posleft, posright),ident), true);
                            :}
                       ;

VariableList ::= VariableDeclaration:head VariableList:tail {:
                        RESULT = cons(head, tail);
                    :}
               | /*EmtpyVariableList*/ {:
                        RESULT = nil();
                    :}
               ;

VariableDeclaration ::= VAR:var IDENT:name COLON TypeExpression:typeExpression SEMIC {:
                            RESULT = new VariableDefinition(new Position(varleft, varright), name, typeExpression);
                        :}
                    ;

StatementList ::= Statement:head StatementList:tail {:
                        RESULT = cons(head, tail);
                    :}
                | /*EmptyStatement*/ {:
                        RESULT = nil();
                    :}
                ;

//Statements have various type such as:
Statement ::= SEMIC:pos {:
                    RESULT = new EmptyStatement(new Position(posleft, posright));
                :}
            | AssignStmt:name {:
                    RESULT = name;
                :}
            | CallStmt:name {:
                    RESULT = name;
                :}
            | CompoundStmt:name {:
                    RESULT = name;
                :}
            | WhileStmt:name {:
                    RESULT = name;
                :}
            | IfStmt:name {:
                    RESULT = name;
                :}
            ;

AssignStmt ::= VarName:var ASGN: pos Expr1: value SEMIC {:
                    RESULT = new AssignStatement(new Position(posleft, posright), var, value);
                :}
            ;

CallStmt ::= IDENT:ident LPAREN ArgumentExprList:list RPAREN SEMIC {:
                    RESULT = new CallStatement(new Position(identleft, identright), ident, list);
                :}
            ;

CompoundStmt ::= LCURL StatementList:list RCURL {:
                    RESULT = new CompoundStatement(new Position(listleft, listright), list);
                :}
            ;

WhileStmt ::= WHILE:pos LPAREN Expr:expr RPAREN Statement:statement {:
                    RESULT = new WhileStatement(new Position(posleft, posright), expr, statement);
                :}
            ;

IfStmt ::= IF:pos LPAREN Expr:expr RPAREN Statement:statement {:
                    RESULT = new IfStatement(new Position(posleft, posright), expr, statement, new EmptyStatement(Position.ERROR_POSITION));
                :}
         | IF:pos LPAREN Expr:expr RPAREN Statement:statement ELSE Statement:elseStatement {: // Normaly followed with compound statement
                    RESULT = new IfStatement(new Position(posleft, posright), expr, statement, elseStatement);
                :}
            ;

//ArgumentList for Call Statement
ArgumentExprList ::= NEArgument:name {:
                            RESULT = name;
                        :}
                    | /* EmptyArgument */ {:
                            RESULT = nil();
                        :}
                    ;

NEArgument ::= Expr1:head COMMA NEArgument:tail {:
                    RESULT = cons(head, tail);
                :}
            | Expr1:head {:
                    RESULT = cons(head, nil());
                :}
            ;

VarName ::= IDENT:ident {:
                    RESULT = new NamedVariable(new Position(identleft, identright), ident);
                :}
            | VarName:var LBRACK Expr1:expr RBRACK {:
                    RESULT = new ArrayAccess(new Position(varleft, varright), var, expr);
                :}
            ;

Expr ::= Expr1:expr   {:
                RESULT = expr;
            :}
        | Expr1:lop LT:op Expr1:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LST, lop, rop);
            :}
        | Expr1:lop LE:op Expr1:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LSE, lop, rop);
            :}
        | Expr1:lop GT:op Expr1:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRT, lop, rop);
            :}
        | Expr1:lop GE:op Expr1:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRE, lop, rop);
            :}
        | Expr1:lop EQ:op Expr1:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.EQU, lop, rop);
            :}
        | Expr1:lop NE:op Expr1:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.NEQ, lop, rop);
            :}
        ;

Expr1 ::= Expr1:lop PLUS:op Expr2:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.ADD, lop, rop);
            :}
        | Expr1:lop MINUS:op Expr2:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.SUB, lop, rop);
            :}
        | Expr2:expr {:
                RESULT = expr;
            :}
        ;

Expr2 ::= Expr2:lop STAR:op Expr3:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.MUL, lop, rop);
            :}
        | Expr2:lop SLASH:op Expr3:rop {:
                RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.DIV, lop, rop);
            :}
        | Expr3:expr {:
                RESULT = expr;
            :}
        ;

Expr3 ::= LPAREN Expr1:expr RPAREN {:
                RESULT = expr;
            :}
        | INTLIT:intlit {:
                RESULT = new IntLiteral(new Position(intlitleft, intlitright), intlit);
            :}
        | VarName:var {:
                RESULT = new VariableExpression(new Position(varleft, varright), var);
            :}
        | MINUS:op Expr3:rop {:
                RESULT = new UnaryExpression(new Position(opleft, opright), UnaryExpression.Operator.MINUS, rop);
            :}
        ;
